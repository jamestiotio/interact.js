{
	"version": 3,
	"names": [
		"domUtils",
		"extend",
		"getOriginXY",
		"is",
		"normalizeListeners",
		"pointerUtils",
		"drag",
		"DropEvent",
		"fireActivationEvents",
		"activeDrops",
		"event",
		"dropzone",
		"element",
		"slice",
		"target",
		"fire",
		"propagationStopped",
		"immediatePropagationStopped",
		"getActiveDrops",
		"scope",
		"dragElement",
		"interactables",
		"draggableElement",
		"drops",
		"list",
		"options",
		"drop",
		"enabled",
		"accept",
		"string",
		"matchesSelector",
		"func",
		"dropElements",
		"_context",
		"querySelectorAll",
		"array",
		"dropzoneElement",
		"push",
		"rect",
		"getRect",
		"collectDrops",
		"activeDrop",
		"getDrop",
		"dropState",
		"interactable",
		"draggable",
		"dragEvent",
		"pointerEvent",
		"validDrops",
		"isValid",
		"dropCheck",
		"dropIndex",
		"indexOfDeepestElement",
		"getDropEvents",
		"interaction",
		"_pointerEvent",
		"dropEvents",
		"enter",
		"leave",
		"activate",
		"deactivate",
		"move",
		"type",
		"rejected",
		"cur",
		"prev",
		"dragLeave",
		"prevDropzone",
		"dragEnter",
		"relatedTarget",
		"fireDropEvents",
		"events",
		"onEventCreated",
		"iEvent",
		"dynamicDrop",
		"dropResult",
		"id",
		"install",
		"actions",
		"interactStatic",
		"interact",
		"Interactable",
		"defaults",
		"usePlugin",
		"prototype",
		"object",
		"listeners",
		"normalized",
		"corrected",
		"Object",
		"keys",
		"reduce",
		"acc",
		"test",
		"prevListeners",
		"off",
		"on",
		"ondrop",
		"ondropactivate",
		"ondropdeactivate",
		"ondragenter",
		"ondragleave",
		"ondropmove",
		"overlap",
		"number",
		"Math",
		"max",
		"min",
		"checker",
		"bool",
		"dropzoneMethod",
		"this",
		"dropElement",
		"dropped",
		"dropOverlap",
		"origin",
		"page",
		"getPageXY",
		"x",
		"y",
		"horizontal",
		"left",
		"right",
		"vertical",
		"top",
		"bottom",
		"dragRect",
		"cx",
		"width",
		"cy",
		"height",
		"dropCheckMethod",
		"newValue",
		"phaselessTypes",
		"dragenter",
		"dragleave",
		"dropactivate",
		"dropdeactivate",
		"dropmove",
		"methodDict",
		"prepared",
		"name",
		"arg"
	],
	"sources": [
		"plugin.ts"
	],
	"sourcesContent": [
		"import type { EventPhase, InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { Interactable } from '@interactjs/core/Interactable'\nimport type { Interaction, DoPhaseArg } from '@interactjs/core/Interaction'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element, PointerEventType, Rect, ListenersArg } from '@interactjs/core/types'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\nimport is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\n/* eslint-disable import/no-duplicates -- for typescript module augmentations */\nimport '../drag/plugin'\n\nimport type { DragEvent } from '../drag/plugin'\nimport drag from '../drag/plugin'\n/* eslint-enable import/no-duplicates */\n\nimport { DropEvent } from './DropEvent'\n\nexport type DropFunctionChecker = (\n  dragEvent: any, // related drag operation\n  event: any, // touch or mouse EventEmitter\n  dropped: boolean, // default checker result\n  dropzone: Interactable, // dropzone interactable\n  dropElement: Element, // drop zone element\n  draggable: Interactable, // draggable's Interactable\n  draggableElement: Element, // dragged element\n) => boolean\n\nexport interface DropzoneOptions extends PerActionDefaults {\n  accept?:\n  | string\n  | Element\n  | (({ dropzone, draggableElement }: { dropzone: Interactable, draggableElement: Element }) => boolean)\n  // How the overlap is checked on the drop zone\n  overlap?: 'pointer' | 'center' | number\n  checker?: DropFunctionChecker\n\n  ondropactivate?: ListenersArg\n  ondropdeactivate?: ListenersArg\n  ondragenter?: ListenersArg\n  ondragleave?: ListenersArg\n  ondropmove?: ListenersArg\n  ondrop?: ListenersArg\n}\n\nexport interface DropzoneMethod {\n  (this: Interactable, options: DropzoneOptions | boolean): Interactable\n  (): DropzoneOptions\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    dropzone: DropzoneMethod\n    dropCheck: (\n      dragEvent: InteractEvent,\n      event: PointerEventType,\n      draggable: Interactable,\n      draggableElement: Element,\n      dropElemen: Element,\n      rect: any,\n    ) => boolean\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    dropState?: DropState\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface InteractEvent {\n    prevDropzone?: Interactable\n    dropzone?: Interactable\n    dragEnter?: Element\n    dragLeave?: Element\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    drop: DropzoneOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    dynamicDrop?: boolean\n  }\n\n  interface SignalArgs {\n    'actions/drop:start': DropSignalArg\n    'actions/drop:move': DropSignalArg\n    'actions/drop:end': DropSignalArg\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    drop?: typeof drop\n  }\n}\n\ndeclare module '@interactjs/core/InteractStatic' {\n  interface InteractStatic {\n    dynamicDrop: (this: InteractStatic, newValue?: boolean) => boolean | this\n  }\n}\n\ninterface DropSignalArg {\n  interaction: Interaction<'drag'>\n  dragEvent: DragEvent\n}\n\nexport interface ActiveDrop {\n  dropzone: Interactable\n  element: Element\n  rect: Rect\n}\n\nexport interface DropState {\n  cur: {\n    // the dropzone a drag target might be dropped into\n    dropzone: Interactable\n    // the element at the time of checking\n    element: Element\n  }\n  prev: {\n    // the dropzone that was recently dragged away from\n    dropzone: Interactable\n    // the element at the time of checking\n    element: Element\n  }\n  // wheather the potential drop was rejected from a listener\n  rejected: boolean\n  // the drop events related to the current drag event\n  events: FiredDropEvents\n  activeDrops: ActiveDrop[]\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    /** @lends module:interact */\n    interactStatic: interact,\n    /** @lends Interactable */\n    Interactable,\n    defaults,\n  } = scope\n\n  scope.usePlugin(drag)\n\n  /**\n   *\n   * ```js\n   * interact('.drop').dropzone({\n   *   accept: '.can-drop' || document.getElementById('single-drop'),\n   *   overlap: 'pointer' || 'center' || zeroToOne\n   * }\n   * ```\n   *\n   * Returns or sets whether draggables can be dropped onto this target to\n   * trigger drop events\n   *\n   * Dropzones can receive the following events:\n   *  - `dropactivate` and `dropdeactivate` when an acceptable drag starts and ends\n   *  - `dragenter` and `dragleave` when a draggable enters and leaves the dropzone\n   *  - `dragmove` when a draggable that has entered the dropzone is moved\n   *  - `drop` when a draggable is dropped into this dropzone\n   *\n   * Use the `accept` option to allow only elements that match the given CSS\n   * selector or element. The value can be:\n   *\n   *  - **an Element** - only that element can be dropped into this dropzone.\n   *  - **a string**, - the element being dragged must match it as a CSS selector.\n   *  - **`null`** - accept options is cleared - it accepts any element.\n   *\n   * Use the `overlap` option to set how drops are checked for. The allowed\n   * values are:\n   *\n   *   - `'pointer'`, the pointer must be over the dropzone (default)\n   *   - `'center'`, the draggable element's center must be over the dropzone\n   *   - a number from 0-1 which is the `(intersection area) / (draggable area)`.\n   *   e.g. `0.5` for drop to happen when half of the area of the draggable is\n   *   over the dropzone\n   *\n   * Use the `checker` option to specify a function to check if a dragged element\n   * is over this Interactable.\n   *\n   * @param {boolean | object | null} [options] The new options to be set.\n   * @return {object | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.dropzone = function (this: Interactable, options) {\n    return dropzoneMethod(this, options)\n  } as Interactable['dropzone']\n\n  /**\n   * ```js\n   * interact(target)\n   * .dropChecker(function(dragEvent,         // related dragmove or dragend event\n   *                       event,             // TouchEvent/PointerEvent/MouseEvent\n   *                       dropped,           // bool result of the default checker\n   *                       dropzone,          // dropzone Interactable\n   *                       dropElement,       // dropzone elemnt\n   *                       draggable,         // draggable Interactable\n   *                       draggableElement) {// draggable element\n   *\n   *   return dropped && event.target.hasAttribute('allow-drop')\n   * }\n   * ```\n   */\n  Interactable.prototype.dropCheck = function (\n    this: Interactable,\n    dragEvent,\n    event,\n    draggable,\n    draggableElement,\n    dropElement,\n    rect,\n  ) {\n    return dropCheckMethod(this, dragEvent, event, draggable, draggableElement, dropElement, rect)\n  }\n\n  /**\n   * Returns or sets whether the dimensions of dropzone elements are calculated\n   * on every dragmove or only on dragstart for the default dropChecker\n   *\n   * @param {boolean} [newValue] True to check on each move. False to check only\n   * before start\n   * @return {boolean | interact} The current setting or interact\n   */\n  interact.dynamicDrop = function (newValue?: boolean) {\n    if (is.bool(newValue)) {\n      // if (dragging && scope.dynamicDrop !== newValue && !newValue) {\n      //  calcRects(dropzones)\n      // }\n\n      scope.dynamicDrop = newValue\n\n      return interact\n    }\n    return scope.dynamicDrop!\n  }\n\n  extend(actions.phaselessTypes, {\n    dragenter: true,\n    dragleave: true,\n    dropactivate: true,\n    dropdeactivate: true,\n    dropmove: true,\n    drop: true,\n  })\n  actions.methodDict.drop = 'dropzone'\n\n  scope.dynamicDrop = false\n\n  defaults.actions.drop = drop.defaults\n}\n\nfunction collectDrops ({ interactables }: Scope, draggableElement: Element) {\n  const drops: ActiveDrop[] = []\n\n  // collect all dropzones and their elements which qualify for a drop\n  for (const dropzone of interactables.list) {\n    if (!dropzone.options.drop.enabled) {\n      continue\n    }\n\n    const accept = dropzone.options.drop.accept\n\n    // test the draggable draggableElement against the dropzone's accept setting\n    if (\n      (is.element(accept) && accept !== draggableElement) ||\n      (is.string(accept) && !domUtils.matchesSelector(draggableElement, accept)) ||\n      (is.func(accept) && !accept({ dropzone, draggableElement }))\n    ) {\n      continue\n    }\n\n    // query for new elements if necessary\n    const dropElements = (\n      is.string(dropzone.target)\n        ? dropzone._context.querySelectorAll(dropzone.target)\n        : is.array(dropzone.target)\n          ? dropzone.target\n          : [dropzone.target]\n    ) as Element[]\n\n    for (const dropzoneElement of dropElements) {\n      if (dropzoneElement !== draggableElement) {\n        drops.push({\n          dropzone,\n          element: dropzoneElement,\n          rect: dropzone.getRect(dropzoneElement),\n        })\n      }\n    }\n  }\n\n  return drops\n}\n\nfunction fireActivationEvents (activeDrops: ActiveDrop[], event: DropEvent) {\n  // loop through all active dropzones and trigger event\n  for (const { dropzone, element } of activeDrops.slice()) {\n    event.dropzone = dropzone\n\n    // set current element as event target\n    event.target = element\n    dropzone.fire(event)\n    event.propagationStopped = event.immediatePropagationStopped = false\n  }\n}\n\n// return a new array of possible drops. getActiveDrops should always be\n// called when a drag has just started or a drag event happens while\n// dynamicDrop is true\nfunction getActiveDrops (scope: Scope, dragElement: Element) {\n  // get dropzones and their elements that could receive the draggable\n  const activeDrops = collectDrops(scope, dragElement)\n\n  for (const activeDrop of activeDrops) {\n    activeDrop.rect = activeDrop.dropzone.getRect(activeDrop.element)\n  }\n\n  return activeDrops\n}\n\nfunction getDrop (\n  { dropState, interactable: draggable, element: dragElement }: Interaction,\n  dragEvent,\n  pointerEvent,\n) {\n  const validDrops: Element[] = []\n\n  // collect all dropzones and their elements which qualify for a drop\n  for (const { dropzone, element: dropzoneElement, rect } of dropState.activeDrops) {\n    const isValid = dropzone.dropCheck(\n      dragEvent,\n      pointerEvent,\n      draggable!,\n      dragElement!,\n      dropzoneElement,\n      rect,\n    )\n    validDrops.push(isValid ? dropzoneElement : null)\n  }\n\n  // get the most appropriate dropzone based on DOM depth and order\n  const dropIndex = domUtils.indexOfDeepestElement(validDrops)\n\n  return dropState!.activeDrops[dropIndex] || null\n}\n\nfunction getDropEvents (interaction: Interaction, _pointerEvent, dragEvent: DragEvent) {\n  const dropState = interaction.dropState!\n  const dropEvents: Record<string, DropEvent | null> = {\n    enter: null,\n    leave: null,\n    activate: null,\n    deactivate: null,\n    move: null,\n    drop: null,\n  }\n\n  if (dragEvent.type === 'dragstart') {\n    dropEvents.activate = new DropEvent(dropState, dragEvent, 'dropactivate')\n\n    dropEvents.activate.target = null as never\n    dropEvents.activate.dropzone = null as never\n  }\n  if (dragEvent.type === 'dragend') {\n    dropEvents.deactivate = new DropEvent(dropState, dragEvent, 'dropdeactivate')\n\n    dropEvents.deactivate.target = null as never\n    dropEvents.deactivate.dropzone = null as never\n  }\n\n  if (dropState.rejected) {\n    return dropEvents\n  }\n\n  if (dropState.cur.element !== dropState.prev.element) {\n    // if there was a previous dropzone, create a dragleave event\n    if (dropState.prev.dropzone) {\n      dropEvents.leave = new DropEvent(dropState, dragEvent, 'dragleave')\n\n      dragEvent.dragLeave = dropEvents.leave.target = dropState.prev.element\n      dragEvent.prevDropzone = dropEvents.leave.dropzone = dropState.prev.dropzone\n    }\n    // if dropzone is not null, create a dragenter event\n    if (dropState.cur.dropzone) {\n      dropEvents.enter = new DropEvent(dropState, dragEvent, 'dragenter')\n\n      dragEvent.dragEnter = dropState.cur.element\n      dragEvent.dropzone = dropState.cur.dropzone\n    }\n  }\n\n  if (dragEvent.type === 'dragend' && dropState.cur.dropzone) {\n    dropEvents.drop = new DropEvent(dropState, dragEvent, 'drop')\n\n    dragEvent.dropzone = dropState.cur.dropzone\n    dragEvent.relatedTarget = dropState.cur.element\n  }\n  if (dragEvent.type === 'dragmove' && dropState.cur.dropzone) {\n    dropEvents.move = new DropEvent(dropState, dragEvent, 'dropmove')\n\n    dragEvent.dropzone = dropState.cur.dropzone\n  }\n\n  return dropEvents\n}\n\ntype FiredDropEvents = Partial<\nRecord<'leave' | 'enter' | 'move' | 'drop' | 'activate' | 'deactivate', DropEvent>\n>\n\nfunction fireDropEvents (interaction: Interaction, events: FiredDropEvents) {\n  const dropState = interaction.dropState!\n  const { activeDrops, cur, prev } = dropState\n\n  if (events.leave) {\n    prev.dropzone.fire(events.leave)\n  }\n  if (events.enter) {\n    cur.dropzone.fire(events.enter)\n  }\n  if (events.move) {\n    cur.dropzone.fire(events.move)\n  }\n  if (events.drop) {\n    cur.dropzone.fire(events.drop)\n  }\n\n  if (events.deactivate) {\n    fireActivationEvents(activeDrops, events.deactivate)\n  }\n\n  dropState.prev.dropzone = cur.dropzone\n  dropState.prev.element = cur.element\n}\n\nfunction onEventCreated ({ interaction, iEvent, event }: DoPhaseArg<'drag', EventPhase>, scope: Scope) {\n  if (iEvent.type !== 'dragmove' && iEvent.type !== 'dragend') {\n    return\n  }\n\n  const dropState = interaction.dropState!\n\n  if (scope.dynamicDrop) {\n    dropState.activeDrops = getActiveDrops(scope, interaction.element!)\n  }\n\n  const dragEvent = iEvent\n  const dropResult = getDrop(interaction, dragEvent, event)\n\n  // update rejected status\n  dropState.rejected =\n    dropState.rejected &&\n    !!dropResult &&\n    dropResult.dropzone === dropState.cur.dropzone &&\n    dropResult.element === dropState.cur.element\n\n  dropState.cur.dropzone = dropResult && dropResult.dropzone\n  dropState.cur.element = dropResult && dropResult.element\n\n  dropState.events = getDropEvents(interaction, event, dragEvent)\n}\n\nfunction dropzoneMethod(interactable: Interactable): DropzoneOptions\nfunction dropzoneMethod(interactable: Interactable, options: DropzoneOptions | boolean): Interactable\nfunction dropzoneMethod (interactable: Interactable, options?: DropzoneOptions | boolean) {\n  if (is.object(options)) {\n    interactable.options.drop.enabled = options.enabled !== false\n\n    if (options.listeners) {\n      const normalized = normalizeListeners(options.listeners)\n      // rename 'drop' to '' as it will be prefixed with 'drop'\n      const corrected = Object.keys(normalized).reduce((acc, type) => {\n        const correctedType = /^(enter|leave)/.test(type)\n          ? `drag${type}`\n          : /^(activate|deactivate|move)/.test(type)\n            ? `drop${type}`\n            : type\n\n        acc[correctedType] = normalized[type]\n\n        return acc\n      }, {})\n\n      const prevListeners = interactable.options.drop.listeners\n      prevListeners && interactable.off(prevListeners)\n\n      interactable.on(corrected)\n      interactable.options.drop.listeners = corrected\n    }\n\n    if (is.func(options.ondrop)) {\n      interactable.on('drop', options.ondrop)\n    }\n    if (is.func(options.ondropactivate)) {\n      interactable.on('dropactivate', options.ondropactivate)\n    }\n    if (is.func(options.ondropdeactivate)) {\n      interactable.on('dropdeactivate', options.ondropdeactivate)\n    }\n    if (is.func(options.ondragenter)) {\n      interactable.on('dragenter', options.ondragenter)\n    }\n    if (is.func(options.ondragleave)) {\n      interactable.on('dragleave', options.ondragleave)\n    }\n    if (is.func(options.ondropmove)) {\n      interactable.on('dropmove', options.ondropmove)\n    }\n\n    if (/^(pointer|center)$/.test(options.overlap as string)) {\n      interactable.options.drop.overlap = options.overlap\n    } else if (is.number(options.overlap)) {\n      interactable.options.drop.overlap = Math.max(Math.min(1, options.overlap), 0)\n    }\n    if ('accept' in options) {\n      interactable.options.drop.accept = options.accept\n    }\n    if ('checker' in options) {\n      interactable.options.drop.checker = options.checker\n    }\n\n    return interactable\n  }\n\n  if (is.bool(options)) {\n    interactable.options.drop.enabled = options\n\n    return interactable\n  }\n\n  return interactable.options.drop\n}\n\nfunction dropCheckMethod (\n  interactable: Interactable,\n  dragEvent: InteractEvent,\n  event: PointerEventType,\n  draggable: Interactable,\n  draggableElement: Element,\n  dropElement: Element,\n  rect: any,\n) {\n  let dropped = false\n\n  // if the dropzone has no rect (eg. display: none)\n  // call the custom dropChecker or just return false\n  if (!(rect = rect || interactable.getRect(dropElement))) {\n    return interactable.options.drop.checker\n      ? interactable.options.drop.checker(\n        dragEvent,\n        event,\n        dropped,\n        interactable,\n        dropElement,\n        draggable,\n        draggableElement,\n      )\n      : false\n  }\n\n  const dropOverlap = interactable.options.drop.overlap\n\n  if (dropOverlap === 'pointer') {\n    const origin = getOriginXY(draggable, draggableElement, 'drag')\n    const page = pointerUtils.getPageXY(dragEvent)\n\n    page.x += origin.x\n    page.y += origin.y\n\n    const horizontal = page.x > rect.left && page.x < rect.right\n    const vertical = page.y > rect.top && page.y < rect.bottom\n\n    dropped = horizontal && vertical\n  }\n\n  const dragRect = draggable.getRect(draggableElement)\n\n  if (dragRect && dropOverlap === 'center') {\n    const cx = dragRect.left + dragRect.width / 2\n    const cy = dragRect.top + dragRect.height / 2\n\n    dropped = cx >= rect.left && cx <= rect.right && cy >= rect.top && cy <= rect.bottom\n  }\n\n  if (dragRect && is.number(dropOverlap)) {\n    const overlapArea =\n      Math.max(0, Math.min(rect.right, dragRect.right) - Math.max(rect.left, dragRect.left)) *\n      Math.max(0, Math.min(rect.bottom, dragRect.bottom) - Math.max(rect.top, dragRect.top))\n\n    const overlapRatio = overlapArea / (dragRect.width * dragRect.height)\n\n    dropped = overlapRatio >= dropOverlap\n  }\n\n  if (interactable.options.drop.checker) {\n    dropped = interactable.options.drop.checker(\n      dragEvent,\n      event,\n      dropped,\n      interactable,\n      dropElement,\n      draggable,\n      draggableElement,\n    )\n  }\n\n  return dropped\n}\n\nconst drop: Plugin = {\n  id: 'actions/drop',\n  install,\n  listeners: {\n    'interactions:before-action-start': ({ interaction }) => {\n      if (interaction.prepared.name !== 'drag') {\n        return\n      }\n\n      interaction.dropState = {\n        cur: {\n          dropzone: null,\n          element: null,\n        },\n        prev: {\n          dropzone: null,\n          element: null,\n        },\n        rejected: null,\n        events: null,\n        activeDrops: [],\n      }\n    },\n\n    'interactions:after-action-start': (\n      { interaction, event, iEvent: dragEvent }: DoPhaseArg<'drag', EventPhase>,\n      scope,\n    ) => {\n      if (interaction.prepared.name !== 'drag') {\n        return\n      }\n\n      const dropState = interaction.dropState!\n\n      // reset active dropzones\n      dropState.activeDrops = []\n      dropState.events = {}\n      dropState.activeDrops = getActiveDrops(scope, interaction.element!)\n      dropState.events = getDropEvents(interaction, event, dragEvent)\n\n      if (dropState.events.activate) {\n        fireActivationEvents(dropState.activeDrops, dropState.events.activate)\n        scope.fire('actions/drop:start', { interaction, dragEvent })\n      }\n    },\n\n    'interactions:action-move': onEventCreated,\n\n    'interactions:after-action-move': (\n      { interaction, iEvent: dragEvent }: DoPhaseArg<'drag', EventPhase>,\n      scope,\n    ) => {\n      if (interaction.prepared.name !== 'drag') {\n        return\n      }\n\n      const dropState = interaction.dropState!\n      fireDropEvents(interaction, dropState.events)\n\n      scope.fire('actions/drop:move', { interaction, dragEvent })\n      dropState.events = {}\n    },\n\n    'interactions:action-end': (arg: DoPhaseArg<'drag', EventPhase>, scope) => {\n      if (arg.interaction.prepared.name !== 'drag') {\n        return\n      }\n\n      const { interaction, iEvent: dragEvent } = arg\n\n      onEventCreated(arg, scope)\n      fireDropEvents(interaction, interaction.dropState!.events)\n      scope.fire('actions/drop:end', { interaction, dragEvent })\n    },\n\n    'interactions:stop': ({ interaction }) => {\n      if (interaction.prepared.name !== 'drag') {\n        return\n      }\n\n      const { dropState } = interaction\n\n      if (dropState) {\n        dropState.activeDrops = null as never\n        dropState.events = null as never\n        dropState.cur.dropzone = null as never\n        dropState.cur.element = null as never\n        dropState.prev.dropzone = null as never\n        dropState.prev.element = null as never\n        dropState.rejected = false\n      }\n    },\n  },\n  getActiveDrops,\n  getDrop,\n  getDropEvents,\n  fireDropEvents,\n  defaults: {\n    enabled: false,\n    accept: null as never,\n    overlap: 'pointer',\n  } as DropzoneOptions,\n}\n\nexport default drop\n"
	],
	"mappings": "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"
}