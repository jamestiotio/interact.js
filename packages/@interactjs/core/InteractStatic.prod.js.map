{
	"version": 3,
	"names": [
		"browser",
		"domUtils",
		"is",
		"isNonNativeEvent",
		"warnOnce",
		"pointerUtils",
		"createInteractStatic",
		"scope",
		"interact",
		"target",
		"options",
		"interactable",
		"interactables",
		"getExisting",
		"new",
		"events",
		"global",
		"globalEvents",
		"getPointerAverage",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"version",
		"use",
		"plugin",
		"this",
		"usePlugin",
		"isSet",
		"get",
		"context",
		"on",
		"type",
		"listener",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"sources": [
		"InteractStatic.ts"
	],
	"sourcesContent": [
		"/** @module interact */\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Context, EventTypes, Listener, ListenersArg, Target } from '@interactjs/core/types'\nimport browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport { warnOnce } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport type { Interactable } from './Interactable'\nimport type { Options } from './options'\n\ndeclare module '@interactjs/core/InteractStatic' {\n  export interface InteractStatic {\n    (target: Target, options?: Options): Interactable\n    getPointerAverage: typeof pointerUtils.pointerAverage\n    getTouchBBox: typeof pointerUtils.touchBBox\n    getTouchDistance: typeof pointerUtils.touchDistance\n    getTouchAngle: typeof pointerUtils.touchAngle\n    getElementRect: typeof domUtils.getElementRect\n    getElementClientRect: typeof domUtils.getElementClientRect\n    matchesSelector: typeof domUtils.matchesSelector\n    closest: typeof domUtils.closest\n    /** @internal */ globalEvents: any\n    version: string\n    /** @internal */ scope: Scope\n    use(\n      plugin: Plugin,\n      options?: {\n        [key: string]: any\n      },\n    ): any\n    isSet(target: Target, options?: any): boolean\n    on(type: string | EventTypes, listener: ListenersArg, options?: object): any\n    off(type: EventTypes, listener: any, options?: object): any\n    debug(): any\n    supportsTouch(): boolean\n    supportsPointerEvent(): boolean\n    stop(): any\n    pointerMoveTolerance(newValue?: number): any\n    addDocument(doc: Document, options?: object): void\n    removeDocument(doc: Document): void\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype _InteractStatic = import('@interactjs/core/InteractStatic').InteractStatic\n\nexport function createInteractStatic (scope: Scope): _InteractStatic {\n  /**\n   * ```js\n   * interact('#draggable').draggable(true)\n   *\n   * var rectables = interact('rect')\n   * rectables\n   *   .gesturable(true)\n   *   .on('gesturemove', function (event) {\n   *       // ...\n   *   })\n   * ```\n   *\n   * The methods of this variable can be used to set elements as interactables\n   * and also to change various default settings.\n   *\n   * Calling it as a function and passing an element or a valid CSS selector\n   * string returns an Interactable object which has various methods to configure\n   * it.\n   *\n   * @global\n   *\n   * @param {Element | string} target The HTML or SVG Element to interact with\n   * or CSS selector\n   * @return {Interactable}\n   */\n  const interact = ((target: Target, options: Options) => {\n    let interactable = scope.interactables.getExisting(target, options)\n\n    if (!interactable) {\n      interactable = scope.interactables.new(target, options)\n      interactable.events.global = interact.globalEvents\n    }\n\n    return interactable\n  }) as _InteractStatic\n\n  // expose the functions used to calculate multi-touch properties\n  interact.getPointerAverage = pointerUtils.pointerAverage\n  interact.getTouchBBox = pointerUtils.touchBBox\n  interact.getTouchDistance = pointerUtils.touchDistance\n  interact.getTouchAngle = pointerUtils.touchAngle\n\n  interact.getElementRect = domUtils.getElementRect\n  interact.getElementClientRect = domUtils.getElementClientRect\n  interact.matchesSelector = domUtils.matchesSelector\n  interact.closest = domUtils.closest\n\n  interact.globalEvents = {} as any\n\n  // eslint-disable-next-line no-undef\n  interact.version = process.env.npm_package_version\n  interact.scope = scope\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   */\n  interact.use = function (plugin, options) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Target} target The Element or string being searched for\n   * @param {object} options\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  interact.isSet = function (target: Target, options?: { context?: Context }): boolean {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * @deprecated\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  interact.on = warnOnce(function on (type: string | EventTypes, listener: ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type as any[]) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      } else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Listener, { options })\n    }\n\n    return this\n  }, 'The interact.on() method is being deprecated')\n\n  /**\n   * @deprecated\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  interact.off = warnOnce(function off (type: EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents && (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    } else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }, 'The interact.off() method is being deprecated')\n\n  interact.debug = function () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  interact.supportsTouch = function () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  interact.supportsPointerEvent = function () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  interact.stop = function () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  interact.pointerMoveTolerance = function (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  interact.addDocument = function (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  interact.removeDocument = function (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n\n  return interact\n}\n"
	],
	"mappings": "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"
}