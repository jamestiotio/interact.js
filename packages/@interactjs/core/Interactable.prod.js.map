{
	"version": 3,
	"names": [
		"arr",
		"browser",
		"clone",
		"getElementRect",
		"matchesUpTo",
		"nodeContains",
		"trySelector",
		"extend",
		"is",
		"isNonNativeEvent",
		"normalizeListeners",
		"getWindow",
		"Eventable",
		"OnOffMethod",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"options",
		"_actions",
		"target",
		"events",
		"_context",
		"_win",
		"_doc",
		"_scopeEvents",
		"constructor",
		"defaultContext",
		"scopeEvents",
		"this",
		"context",
		"document",
		"set",
		"setOnEvents",
		"actionName",
		"phases",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"_this$_actions$map$ac",
		"actionFilter",
		"map",
		"filterEventType",
		"filter",
		"type",
		"array",
		"object",
		"_onOff",
		"Off",
		"undefined",
		"On",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"rectChecker",
		"checker",
		"rect",
		"apply",
		"width",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"_backCompatOption",
		"newValue",
		"action",
		"origin",
		"deltaSource",
		"getAllElements",
		"Array",
		"querySelectorAll",
		"inContext",
		"ownerDocument",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"fire",
		"iEvent",
		"method",
		"typeArg",
		"listenerArg",
		"wheelEvent",
		"listener",
		"types",
		"off",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"delegatedEvents",
		"delegated",
		"i",
		"length",
		"selector",
		"splice",
		"l",
		"removeDelegate",
		"remove"
	],
	"sources": [
		"Interactable.ts"
	],
	"sourcesContent": [
		"/* eslint-disable no-dupe-class-members */\nimport type { Scope } from '@interactjs/core/scope'\nimport type {\n  ActionMap,\n  ActionMethod,\n  ActionName,\n  Actions,\n  Context,\n  Element,\n  EventTypes,\n  Listeners,\n  ListenersArg,\n  OrBoolean,\n  Target,\n} from '@interactjs/core/types'\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport { Eventable } from './Eventable'\nimport type { ActionDefaults, Defaults, OptionsArg, PerActionDefaults, Options } from './options'\n\ntype IgnoreValue = string | Element | boolean\ntype DeltaSource = 'page' | 'client'\n\nconst enum OnOffMethod {\n  On,\n  Off,\n}\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Actions\n  readonly target: Target\n  readonly events = new Eventable()\n  readonly _context: Context\n  readonly _win: Window\n  readonly _doc: Document\n  readonly _scopeEvents: Scope['events']\n\n  /** */\n  constructor (\n    target: Target,\n    options: any,\n    defaultContext: Document | Element,\n    scopeEvents: Scope['events'],\n  ) {\n    this._actions = options.actions\n    this.target = target\n    this._context = options.context || defaultContext\n    this._win = getWindow(trySelector(target) ? this._context : target)\n    this._doc = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) {\n      this.on(`${actionName}start`, phases.onstart)\n    }\n    if (is.func(phases.onmove)) {\n      this.on(`${actionName}move`, phases.onmove)\n    }\n    if (is.func(phases.onend)) {\n      this.on(`${actionName}end`, phases.onend)\n    }\n    if (is.func(phases.oninertiastart)) {\n      this.on(`${actionName}inertiastart`, phases.oninertiastart)\n    }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: ActionName, prev: Listeners | undefined, cur: Listeners | undefined) {\n    const actionFilter = (this._actions.map[actionName] as { filterEventType?: (type: string) => boolean })\n      ?.filterEventType\n    const filter = (type: string) =>\n      (actionFilter == null || actionFilter(type)) && isNonNativeEvent(type, this._actions)\n\n    if (is.array(prev) || is.object(prev)) {\n      this._onOff(OnOffMethod.Off, actionName, prev, undefined, filter)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this._onOff(OnOffMethod.On, actionName, cur, undefined, filter)\n    }\n  }\n\n  setPerAction (actionName: ActionName, options: OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array(optionValue)) {\n        ;(actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        ;(actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || ({} as any),\n          clone(optionValue),\n        )\n\n        // set anabled field to true if it exists in the defaults\n        if (\n          is.object(defaults.perAction[optionName]) &&\n          'enabled' in (defaults.perAction[optionName] as any)\n        ) {\n          ;(actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        ;(actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        ;(actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Rect} The object's bounding rectangle.\n   */\n  getRect (element: Element) {\n    element = element || (is.element(this.target) ? this.target : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker(): (element: Element) => any | null\n  rectChecker(checker: (element: Element) => any): this\n  rectChecker (checker?: (element: Element) => any) {\n    if (is.func(checker)) {\n      this.getRect = (element) => {\n        const rect = extend({}, checker.apply(this, element))\n\n        if (!(('width' in rect) as unknown)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete (this as Partial<typeof this>).getRect\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      ;(this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        ;(this.options[action as keyof ActionMap] as any)[optionName] = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource(): DeltaSource\n  deltaSource(newValue: DeltaSource): this\n  deltaSource (newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /** @internal */\n  getAllElements (): Element[] {\n    const { target } = this\n\n    if (is.string(target)) {\n      return Array.from(this._context.querySelectorAll(target))\n    }\n\n    if (is.func(target) && (target as any).getAllElements) {\n      return (target as any).getAllElements()\n    }\n\n    return is.element(target) ? [target] : []\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return this._context === element.ownerDocument || nodeContains(this._context, element)\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Node,\n  ) {\n    return (\n      !this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n      this.testAllow(options.allowFrom, targetNode, eventTarget)\n    )\n  }\n\n  testAllow (this: Interactable, allowFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!allowFrom) {\n      return true\n    }\n\n    if (!is.element(element)) {\n      return false\n    }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    } else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (this: Interactable, ignoreFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!ignoreFrom || !is.element(element)) {\n      return false\n    }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    } else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire<E extends { type: string }> (iEvent: E) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (\n    method: OnOffMethod,\n    typeArg: EventTypes,\n    listenerArg?: ListenersArg | null,\n    options?: any,\n    filter?: (type: string) => boolean,\n  ) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const listeners = normalizeListeners(typeArg, listenerArg, filter)\n\n    for (let type in listeners) {\n      if (type === 'wheel') {\n        type = browser.wheelEvent\n      }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method === OnOffMethod.On ? 'on' : 'off'](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[method === OnOffMethod.On ? 'addDelegate' : 'removeDelegate'](\n            this.target,\n            this._context,\n            type,\n            listener,\n            options,\n          )\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[method === OnOffMethod.On ? 'add' : 'remove'](\n            this.target,\n            type,\n            listener,\n            options,\n          )\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.On, types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.Off, types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    ;(this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n      ;(this[methodName] as ActionMethod<unknown>)(options[actionName])\n    }\n\n    for (const setting in options) {\n      if (setting === 'getRect') {\n        this.rectChecker(options.getRect)\n        continue\n      }\n\n      if (is.func((this as any)[setting])) {\n        ;(this as any)[setting](options[setting as keyof typeof options])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset () {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(\n              this.target,\n              this._context,\n              type,\n              listeners[l][0],\n              listeners[l][1],\n            )\n          }\n        }\n      }\n    } else {\n      this._scopeEvents.remove(this.target, 'all')\n    }\n  }\n}\n"
	],
	"mappings": "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"
}