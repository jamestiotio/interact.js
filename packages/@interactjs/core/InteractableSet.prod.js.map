{
	"version": 3,
	"names": [
		"arr",
		"domUtils",
		"extend",
		"is",
		"InteractableSet",
		"list",
		"selectorMap",
		"scope",
		"constructor",
		"this",
		"addListeners",
		"interactable",
		"target",
		"interactablesOnTarget",
		"string",
		"id",
		"targetIndex",
		"findIndex",
		"i",
		"splice",
		"new",
		"options",
		"actions",
		"Interactable",
		"document",
		"events",
		"addDocument",
		"_doc",
		"push",
		"Object",
		"defineProperty",
		"value",
		"configurable",
		"fire",
		"win",
		"_win",
		"getExisting",
		"context",
		"isSelector",
		"find",
		"_context",
		"inContext",
		"forEachMatch",
		"node",
		"callback",
		"ret",
		"element",
		"matchesSelector",
		"undefined"
	],
	"sources": [
		"InteractableSet.ts"
	],
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type { OptionsArg, Options } from '@interactjs/core/options'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { Target } from '@interactjs/core/types'\nimport * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interactable\n      target: Target\n      options: OptionsArg\n      win: Window\n    }\n  }\n}\n\nexport class InteractableSet {\n  // all set interactables\n  list: Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: Interactable[]\n  } = {}\n\n  scope: Scope\n\n  constructor (scope: Scope) {\n    this.scope = scope\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target } = interactable\n        const interactablesOnTarget: Interactable[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = arr.findIndex(interactablesOnTarget, (i) => i === interactable)\n        interactablesOnTarget.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new (target: Target, options?: any): Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document, this.scope.events)\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) {\n        this.selectorMap[target] = []\n      }\n      this.selectorMap[target].push(interactable)\n    } else {\n      if (!(interactable.target as any)[this.scope.id]) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      ;(target as any)[this.scope.id].push(interactable)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  getExisting (target: Target, options?: Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const interactablesOnTarget: Interactable[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!interactablesOnTarget) return undefined\n\n    return arr.find(\n      interactablesOnTarget,\n      (interactable) =>\n        interactable._context === context && (isSelector || interactable.inContext(target as any)),\n    )\n  }\n\n  forEachMatch<T> (node: Node, callback: (interactable: Interactable) => T): T | void {\n    for (const interactable of this.list) {\n      let ret: T\n\n      if (\n        (is.string(interactable.target)\n          ? // target is a selector and the element matches\n          is.element(node) && domUtils.matchesSelector(node, interactable.target)\n          : // target is the element\n          node === interactable.target) &&\n        // the element is in context\n        interactable.inContext(node)\n      ) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n"
	],
	"mappings": "UAIYA,MAAS,iCACTC,MAAc,mCACnBC,MAAY,iCACZC,MAAQ,6BAaR,MAAMC,gBAEXC,KAAuB,GAEvBC,YAEI,GAEJC,MAEAC,YAAaD,GACXE,KAAKF,MAAQA,EACbA,EAAMG,aAAa,CACjB,qBAAsB,EAAGC,mBACvB,MAAMC,OAAEA,GAAWD,EACbE,EAAwCV,EAAGW,OAAOF,GACpDH,KAAKH,YAAYM,GAChBA,EAAeH,KAAKF,MAAMQ,IAEzBC,EAAchB,EAAIiB,UAAUJ,GAAwBK,GAAMA,IAAMP,IACtEE,EAAsBM,OAAOH,EAAa,MAKhDI,IAAKR,EAAgBS,GACnBA,EAAUnB,EAAOmB,GAAW,GAAI,CAC9BC,QAASb,KAAKF,MAAMe,UAEtB,MAAMX,EAAe,IAAIF,KAAKF,MAAMgB,aAAaX,EAAQS,EAASZ,KAAKF,MAAMiB,SAAUf,KAAKF,MAAMkB,QA4BlG,OA1BAhB,KAAKF,MAAMmB,YAAYf,EAAagB,MACpClB,KAAKJ,KAAKuB,KAAKjB,GAEXR,EAAGW,OAAOF,IACPH,KAAKH,YAAYM,KACpBH,KAAKH,YAAYM,GAAU,IAE7BH,KAAKH,YAAYM,GAAQgB,KAAKjB,KAExBA,EAAaC,OAAeH,KAAKF,MAAMQ,KAC3Cc,OAAOC,eAAelB,EAAQH,KAAKF,MAAMQ,GAAI,CAC3CgB,MAAO,GACPC,cAAc,IAIhBpB,EAAeH,KAAKF,MAAMQ,IAAIa,KAAKjB,IAGvCF,KAAKF,MAAM0B,KAAK,mBAAoB,CAClCrB,SACAS,UACAV,eACAuB,IAAKzB,KAAKF,MAAM4B,OAGXxB,EAGTyB,YAAaxB,EAAgBS,GAC3B,MAAMgB,EAAWhB,GAAWA,EAAQgB,SAAY5B,KAAKF,MAAMiB,SACrDc,EAAanC,EAAGW,OAAOF,GACvBC,EAAwCyB,EAC1C7B,KAAKH,YAAYM,GAChBA,EAAeH,KAAKF,MAAMQ,IAE/B,GAAKF,EAEL,OAAOb,EAAIuC,KACT1B,GACCF,GACCA,EAAa6B,WAAaH,IAAYC,GAAc3B,EAAa8B,UAAU7B,MAIjF8B,aAAiBC,EAAYC,GAC3B,IAAK,MAAMjC,KAAgBF,KAAKJ,KAAM,CACpC,IAAIwC,EAcJ,IAXG1C,EAAGW,OAAOH,EAAaC,QAEtBT,EAAG2C,QAAQH,IAAS1C,EAAS8C,gBAAgBJ,EAAMhC,EAAaC,QAEhE+B,IAAShC,EAAaC,SAExBD,EAAa8B,UAAUE,KAEvBE,EAAMD,EAASjC,SAGLqC,IAARH,EACF,OAAOA"
}