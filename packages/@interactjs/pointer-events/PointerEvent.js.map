{
	"version": 3,
	"sources": [
		"PointerEvent.ts"
	],
	"names": [
		"BaseEvent",
		"pointerUtils",
		"PointerEvent",
		"constructor",
		"type",
		"pointer",
		"event",
		"eventTarget",
		"interaction",
		"timeStamp",
		"pointerExtend",
		"originalEvent",
		"pointerId",
		"getPointerId",
		"pointerType",
		"getPointerType",
		"target",
		"currentTarget",
		"pointerIndex",
		"getPointerIndex",
		"dt",
		"pointers",
		"downTime",
		"interval",
		"tapTime",
		"double",
		"prevTap",
		"_subtractOrigin",
		"x",
		"originX",
		"y",
		"originY",
		"pageX",
		"pageY",
		"clientX",
		"clientY",
		"_addOrigin",
		"preventDefault"
	],
	"mappings": "AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAGA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,eAAe,MAAMC,YAAN,SAAmDF,SAAnD,CAAoE;AAcjF;AACAG,EAAAA,WAAW,CACTC,IADS,EAETC,OAFS,EAGTC,KAHS,EAITC,WAJS,EAKTC,WALS,EAMTC,SANS,EAOT;AACA,UAAMD,WAAN;AACAP,IAAAA,YAAY,CAACS,aAAb,CAA2B,IAA3B,EAAiCJ,KAAjC;;AAEA,QAAIA,KAAK,KAAKD,OAAd,EAAuB;AACrBJ,MAAAA,YAAY,CAACS,aAAb,CAA2B,IAA3B,EAAiCL,OAAjC;AACD;;AAED,SAAKI,SAAL,GAAiBA,SAAjB;AACA,SAAKE,aAAL,GAAqBL,KAArB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKQ,SAAL,GAAiBX,YAAY,CAACY,YAAb,CAA0BR,OAA1B,CAAjB;AACA,SAAKS,WAAL,GAAmBb,YAAY,CAACc,cAAb,CAA4BV,OAA5B,CAAnB;AACA,SAAKW,MAAL,GAAcT,WAAd;AACA,SAAKU,aAAL,GAAqB,IAArB;;AAEA,QAAIb,IAAI,KAAK,KAAb,EAAoB;AAClB,YAAMc,YAAY,GAAGV,WAAW,CAACW,eAAZ,CAA4Bd,OAA5B,CAArB;AACA,WAAKe,EAAL,GAAU,KAAKX,SAAL,GAAiBD,WAAW,CAACa,QAAZ,CAAqBH,YAArB,EAAmCI,QAA9D;AAEA,YAAMC,QAAQ,GAAG,KAAKd,SAAL,GAAiBD,WAAW,CAACgB,OAA9C;AAEA,WAAKC,MAAL,GAAc,CAAC,EACbjB,WAAW,CAACkB,OAAZ,IACAlB,WAAW,CAACkB,OAAZ,CAAoBtB,IAApB,KAA6B,WAD7B,IAEAI,WAAW,CAACkB,OAAZ,CAAoBV,MAApB,KAA+B,KAAKA,MAFpC,IAGAO,QAAQ,GAAG,GAJE,CAAf;AAMD,KAZD,MAYO,IAAInB,IAAI,KAAK,WAAb,EAA0B;AAC/B,WAAKgB,EAAL,GAAWf,OAAD,CAAiCI,SAAjC,GAA6CD,WAAW,CAACgB,OAAnE;AACD;AACF;;AAEDG,EAAAA,eAAe,CAAE;AAAEC,IAAAA,CAAC,EAAEC,OAAL;AAAcC,IAAAA,CAAC,EAAEC;AAAjB,GAAF,EAAqC;AAClD,SAAKC,KAAL,IAAcH,OAAd;AACA,SAAKI,KAAL,IAAcF,OAAd;AACA,SAAKG,OAAL,IAAgBL,OAAhB;AACA,SAAKM,OAAL,IAAgBJ,OAAhB;AAEA,WAAO,IAAP;AACD;;AAEDK,EAAAA,UAAU,CAAE;AAAER,IAAAA,CAAC,EAAEC,OAAL;AAAcC,IAAAA,CAAC,EAAEC;AAAjB,GAAF,EAAqC;AAC7C,SAAKC,KAAL,IAAcH,OAAd;AACA,SAAKI,KAAL,IAAcF,OAAd;AACA,SAAKG,OAAL,IAAgBL,OAAhB;AACA,SAAKM,OAAL,IAAgBJ,OAAhB;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEM,EAAAA,cAAc,GAAI;AAChB,SAAK1B,aAAL,CAAmB0B,cAAnB;AACD;;AA9EgF;AAiFnF,SAASnC,YAAT",
	"sourcesContent": [
		"import { BaseEvent } from '@interactjs/core/BaseEvent'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { PointerEventType, PointerType, Point } from '@interactjs/types/index'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nexport default class PointerEvent<T extends string = any> extends BaseEvent<never> {\n  declare type: T\n  declare originalEvent: PointerEventType\n  declare pointerId: number\n  declare pointerType: string\n  declare double: boolean\n  declare pageX: number\n  declare pageY: number\n  declare clientX: number\n  declare clientY: number\n  declare dt: number\n  declare eventable: any;\n  [key: string]: any\n\n  /** */\n  constructor (\n    type: T,\n    pointer: PointerType | PointerEvent<any>,\n    event: PointerEventType,\n    eventTarget: Node,\n    interaction: Interaction<never>,\n    timeStamp: number,\n  ) {\n    super(interaction)\n    pointerUtils.pointerExtend(this, event)\n\n    if (event !== pointer) {\n      pointerUtils.pointerExtend(this, pointer)\n    }\n\n    this.timeStamp = timeStamp\n    this.originalEvent = event\n    this.type = type\n    this.pointerId = pointerUtils.getPointerId(pointer)\n    this.pointerType = pointerUtils.getPointerType(pointer)\n    this.target = eventTarget\n    this.currentTarget = null\n\n    if (type === 'tap') {\n      const pointerIndex = interaction.getPointerIndex(pointer)\n      this.dt = this.timeStamp - interaction.pointers[pointerIndex].downTime\n\n      const interval = this.timeStamp - interaction.tapTime\n\n      this.double = !!(\n        interaction.prevTap &&\n        interaction.prevTap.type !== 'doubletap' &&\n        interaction.prevTap.target === this.target &&\n        interval < 500\n      )\n    } else if (type === 'doubletap') {\n      this.dt = (pointer as PointerEvent<'tap'>).timeStamp - interaction.tapTime\n    }\n  }\n\n  _subtractOrigin ({ x: originX, y: originY }: Point) {\n    this.pageX -= originX\n    this.pageY -= originY\n    this.clientX -= originX\n    this.clientY -= originY\n\n    return this\n  }\n\n  _addOrigin ({ x: originX, y: originY }: Point) {\n    this.pageX += originX\n    this.pageY += originY\n    this.clientX += originX\n    this.clientY += originY\n\n    return this\n  }\n\n  /**\n   * Prevent the default behaviour of the original Event\n   */\n  preventDefault () {\n    this.originalEvent.preventDefault()\n  }\n}\n\nexport { PointerEvent }\n"
	]
}