{
	"version": 3,
	"sources": [
		"plugin.ts"
	],
	"names": [
		"Modification",
		"modifiers",
		"offset",
		"dom",
		"hypot",
		"is",
		"copyCoords",
		"raf",
		"install",
		"scope",
		"defaults",
		"usePlugin",
		"default",
		"actions",
		"phases",
		"inertiastart",
		"resume",
		"perAction",
		"inertia",
		"enabled",
		"resistance",
		"minSpeed",
		"endSpeed",
		"allowResume",
		"smoothEndDuration",
		"InertiaState",
		"active",
		"isModified",
		"smoothEnd",
		"modification",
		"modifierCount",
		"modifierArg",
		"startCoords",
		"t0",
		"v0",
		"te",
		"targetOffset",
		"modifiedOffset",
		"currentOffset",
		"lambda_v0",
		"one_ve_v0",
		"timeout",
		"interaction",
		"constructor",
		"start",
		"event",
		"options",
		"getOptions",
		"client",
		"velocityClient",
		"coords",
		"velocity",
		"pointerSpeed",
		"x",
		"y",
		"copyFrom",
		"_now",
		"cur",
		"page",
		"fillArg",
		"pageCoords",
		"preEnd",
		"phase",
		"thrown",
		"timeStamp",
		"startInertia",
		"result",
		"setAll",
		"changed",
		"startSmoothEnd",
		"rect",
		"offsetBy",
		"_doPhase",
		"simulation",
		"startVelocity",
		"lambda",
		"inertiaDur",
		"Math",
		"log",
		"delta",
		"onNextFrame",
		"inertiaTick",
		"smoothEndTick",
		"tickFn",
		"request",
		"t",
		"progress",
		"exp",
		"newOffset",
		"getQuadraticCurvePoint",
		"move",
		"end",
		"duration",
		"easeOutQuad",
		"skipModifiers",
		"pointer",
		"eventTarget",
		"updatePointer",
		"prev",
		"stop",
		"cancel",
		"_interacting",
		"started",
		"arg",
		"state",
		"element",
		"parentNode",
		"interactable",
		"prepared",
		"name",
		"id",
		"before",
		"listeners",
		"applyToInteraction",
		"setAndApply",
		"addEventModifiers",
		"restoreInteractionCoords",
		"_getQBezierValue",
		"p1",
		"p2",
		"p3",
		"iT",
		"startX",
		"startY",
		"cpX",
		"cpY",
		"endX",
		"endY",
		"position",
		"b",
		"c",
		"d"
	],
	"mappings": "AAEA,OAAOA,YAAP,MAAyB,8BAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,sBAA3B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAO,KAAKC,GAAZ,MAAqB,sBAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,EAAP,MAAe,gBAAf;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAuCA,SAASC,OAAT,CAAkBC,KAAlB,EAAgC;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AAEAA,EAAAA,KAAK,CAACE,SAAN,CAAgBT,MAAhB;AACAO,EAAAA,KAAK,CAACE,SAAN,CAAgBV,SAAS,CAACW,OAA1B;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAcC,MAAd,CAAqBC,YAArB,GAAoC,IAApC;AACAN,EAAAA,KAAK,CAACI,OAAN,CAAcC,MAAd,CAAqBE,MAArB,GAA8B,IAA9B;AAEAN,EAAAA,QAAQ,CAACO,SAAT,CAAmBC,OAAnB,GAA6B;AAC3BC,IAAAA,OAAO,EAAE,KADkB;AAE3BC,IAAAA,UAAU,EAAE,EAFe;AAEX;AAChBC,IAAAA,QAAQ,EAAE,GAHiB;AAGZ;AACfC,IAAAA,QAAQ,EAAE,EAJiB;AAIb;AACdC,IAAAA,WAAW,EAAE,IALc;AAKR;AACnBC,IAAAA,iBAAiB,EAAE,GANQ,CAMH;;AANG,GAA7B;AAQD;;AAED,OAAO,MAAMC,YAAN,CAAmB;AACxBC,EAAAA,MAAM,GAAG,KAAH;AACNC,EAAAA,UAAU,GAAG,KAAH;AACVC,EAAAA,SAAS,GAAG,KAAH;AACTL,EAAAA,WAAW,GAAG,KAAH;AAEXM,EAAAA,YAAY;AACZC,EAAAA,aAAa,GAAG,CAAH;AACbC,EAAAA,WAAW;AAEXC,EAAAA,WAAW;AACXC,EAAAA,EAAE,GAAG,CAAH;AACFC,EAAAA,EAAE,GAAG,CAAH;AAEFC,EAAAA,EAAE,GAAG,CAAH;AACFC,EAAAA,YAAY;AACZC,EAAAA,cAAc;AACdC,EAAAA,aAAa;AAEbC,EAAAA,SAAS,GAAI,CAAJ,CAnBe,CAmBT;;AACfC,EAAAA,SAAS,GAAI,CAAJ,CApBe,CAoBT;;AACfC,EAAAA,OAAO;AACEC,EAAAA,WAAW;;AAEpBC,EAAAA,WAAW,CAAED,WAAF,EAA4B;AACrC,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;AAEDE,EAAAA,KAAK,CAAEC,KAAF,EAA2B;AAC9B,UAAM;AAAEH,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAMI,OAAO,GAAGC,UAAU,CAACL,WAAD,CAA1B;;AAEA,QAAI,CAACI,OAAD,IAAY,CAACA,OAAO,CAAC3B,OAAzB,EAAkC;AAChC,aAAO,KAAP;AACD;;AAED,UAAM;AAAE6B,MAAAA,MAAM,EAAEC;AAAV,QAA6BP,WAAW,CAACQ,MAAZ,CAAmBC,QAAtD;AACA,UAAMC,YAAY,GAAGhD,KAAK,CAAC6C,cAAc,CAACI,CAAhB,EAAmBJ,cAAc,CAACK,CAAlC,CAA1B;AACA,UAAMzB,YAAY,GAAG,KAAKA,YAAL,KAAsB,KAAKA,YAAL,GAAoB,IAAI7B,YAAJ,CAAiB0C,WAAjB,CAA1C,CAArB;AAEAb,IAAAA,YAAY,CAAC0B,QAAb,CAAsBb,WAAW,CAACb,YAAlC;AAEA,SAAKI,EAAL,GAAUS,WAAW,CAACc,IAAZ,EAAV;AACA,SAAKjC,WAAL,GAAmBuB,OAAO,CAACvB,WAA3B;AACA,SAAKW,EAAL,GAAUkB,YAAV;AACA,SAAKd,aAAL,GAAqB;AAAEe,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAArB;AACA,SAAKtB,WAAL,GAAmBU,WAAW,CAACQ,MAAZ,CAAmBO,GAAnB,CAAuBC,IAA1C;AAEA,SAAK3B,WAAL,GAAmBF,YAAY,CAAC8B,OAAb,CAAqB;AACtCC,MAAAA,UAAU,EAAE,KAAK5B,WADqB;AAEtC6B,MAAAA,MAAM,EAAE,IAF8B;AAGtCC,MAAAA,KAAK,EAAE;AAH+B,KAArB,CAAnB;AAMA,UAAMC,MAAM,GACV,KAAK9B,EAAL,GAAUS,WAAW,CAACQ,MAAZ,CAAmBO,GAAnB,CAAuBO,SAAjC,GAA6C,EAA7C,IACAZ,YAAY,GAAGN,OAAO,CAACzB,QADvB,IAEA+B,YAAY,GAAGN,OAAO,CAACxB,QAHzB;;AAKA,QAAIyC,MAAJ,EAAY;AACV,WAAKE,YAAL;AACD,KAFD,MAEO;AACLpC,MAAAA,YAAY,CAACqC,MAAb,GAAsBrC,YAAY,CAACsC,MAAb,CAAoB,KAAKpC,WAAzB,CAAtB;;AAEA,UAAI,CAACF,YAAY,CAACqC,MAAb,CAAoBE,OAAzB,EAAkC;AAChC,eAAO,KAAP;AACD;;AAED,WAAKC,cAAL;AACD,KAzC6B,CA2C9B;;;AACA3B,IAAAA,WAAW,CAACb,YAAZ,CAAyBqC,MAAzB,CAAgCI,IAAhC,GAAuC,IAAvC,CA5C8B,CA8C9B;;AACA5B,IAAAA,WAAW,CAAC6B,QAAZ,CAAqB,KAAKnC,YAA1B;;AACAM,IAAAA,WAAW,CAAC8B,QAAZ,CAAqB;AACnB9B,MAAAA,WADmB;AAEnBG,MAAAA,KAFmB;AAGnBiB,MAAAA,KAAK,EAAE;AAHY,KAArB;;AAKApB,IAAAA,WAAW,CAAC6B,QAAZ,CAAqB;AAAElB,MAAAA,CAAC,EAAE,CAAC,KAAKjB,YAAL,CAAkBiB,CAAxB;AAA2BC,MAAAA,CAAC,EAAE,CAAC,KAAKlB,YAAL,CAAkBkB;AAAjD,KAArB,EArD8B,CAsD9B;;AACAZ,IAAAA,WAAW,CAACb,YAAZ,CAAyBqC,MAAzB,CAAgCI,IAAhC,GAAuC,IAAvC;AAEA,SAAK5C,MAAL,GAAc,IAAd;AACAgB,IAAAA,WAAW,CAAC+B,UAAZ,GAAyB,IAAzB;AAEA,WAAO,IAAP;AACD;;AAEDR,EAAAA,YAAY,GAAI;AACd,UAAMS,aAAa,GAAG,KAAKhC,WAAL,CAAiBQ,MAAjB,CAAwBC,QAAxB,CAAiCH,MAAvD;AACA,UAAMF,OAAO,GAAGC,UAAU,CAAC,KAAKL,WAAN,CAA1B;AACA,UAAMiC,MAAM,GAAG7B,OAAO,CAAC1B,UAAvB;AACA,UAAMwD,UAAU,GAAG,CAACC,IAAI,CAACC,GAAL,CAAShC,OAAO,CAACxB,QAAR,GAAmB,KAAKY,EAAjC,CAAD,GAAwCyC,MAA3D;AAEA,SAAKvC,YAAL,GAAoB;AAClBiB,MAAAA,CAAC,EAAE,CAACqB,aAAa,CAACrB,CAAd,GAAkBuB,UAAnB,IAAiCD,MADlB;AAElBrB,MAAAA,CAAC,EAAE,CAACoB,aAAa,CAACpB,CAAd,GAAkBsB,UAAnB,IAAiCD;AAFlB,KAApB;AAKA,SAAKxC,EAAL,GAAUyC,UAAV;AACA,SAAKrC,SAAL,GAAiBoC,MAAM,GAAG,KAAKzC,EAA/B;AACA,SAAKM,SAAL,GAAiB,IAAIM,OAAO,CAACxB,QAAR,GAAmB,KAAKY,EAA7C;AAEA,UAAM;AAAEL,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,QAAgC,IAAtC;AAEAA,IAAAA,WAAW,CAAC6B,UAAZ,GAAyB;AACvBP,MAAAA,CAAC,EAAE,KAAKrB,WAAL,CAAiBqB,CAAjB,GAAqB,KAAKjB,YAAL,CAAkBiB,CADnB;AAEvBC,MAAAA,CAAC,EAAE,KAAKtB,WAAL,CAAiBsB,CAAjB,GAAqB,KAAKlB,YAAL,CAAkBkB;AAFnB,KAAzB;AAKAzB,IAAAA,YAAY,CAACqC,MAAb,GAAsBrC,YAAY,CAACsC,MAAb,CAAoBpC,WAApB,CAAtB;;AAEA,QAAIF,YAAY,CAACqC,MAAb,CAAoBE,OAAxB,EAAiC;AAC/B,WAAKzC,UAAL,GAAkB,IAAlB;AACA,WAAKU,cAAL,GAAsB;AACpBgB,QAAAA,CAAC,EAAE,KAAKjB,YAAL,CAAkBiB,CAAlB,GAAsBxB,YAAY,CAACqC,MAAb,CAAoBa,KAApB,CAA0B1B,CAD/B;AAEpBC,QAAAA,CAAC,EAAE,KAAKlB,YAAL,CAAkBkB,CAAlB,GAAsBzB,YAAY,CAACqC,MAAb,CAAoBa,KAApB,CAA0BzB;AAF/B,OAAtB;AAID;;AAED,SAAK0B,WAAL,CAAiB,MAAM,KAAKC,WAAL,EAAvB;AACD;;AAEDZ,EAAAA,cAAc,GAAI;AAChB,SAAKzC,SAAL,GAAiB,IAAjB;AACA,SAAKD,UAAL,GAAkB,IAAlB;AACA,SAAKS,YAAL,GAAoB;AAClBiB,MAAAA,CAAC,EAAE,KAAKxB,YAAL,CAAkBqC,MAAlB,CAAyBa,KAAzB,CAA+B1B,CADhB;AAElBC,MAAAA,CAAC,EAAE,KAAKzB,YAAL,CAAkBqC,MAAlB,CAAyBa,KAAzB,CAA+BzB;AAFhB,KAApB;AAKA,SAAK0B,WAAL,CAAiB,MAAM,KAAKE,aAAL,EAAvB;AACD;;AAEDF,EAAAA,WAAW,CAAEG,MAAF,EAAsB;AAC/B,SAAK1C,OAAL,GAAelC,GAAG,CAAC6E,OAAJ,CAAY,MAAM;AAC/B,UAAI,KAAK1D,MAAT,EAAiB;AACfyD,QAAAA,MAAM;AACP;AACF,KAJc,CAAf;AAKD;;AAEDF,EAAAA,WAAW,GAAI;AACb,UAAM;AAAEvC,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAMI,OAAO,GAAGC,UAAU,CAACL,WAAD,CAA1B;AACA,UAAMiC,MAAM,GAAG7B,OAAO,CAAC1B,UAAvB;AACA,UAAMiE,CAAC,GAAG,CAAC3C,WAAW,CAACc,IAAZ,KAAqB,KAAKvB,EAA3B,IAAiC,IAA3C;;AAEA,QAAIoD,CAAC,GAAG,KAAKlD,EAAb,EAAiB;AACf,YAAMmD,QAAQ,GAAG,IAAI,CAACT,IAAI,CAACU,GAAL,CAAS,CAACZ,MAAD,GAAUU,CAAnB,IAAwB,KAAK9C,SAA9B,IAA2C,KAAKC,SAArE;AACA,UAAIgD,SAAJ;;AAEA,UAAI,KAAK7D,UAAT,EAAqB;AACnB6D,QAAAA,SAAS,GAAGC,sBAAsB,CAChC,CADgC,EAEhC,CAFgC,EAGhC,KAAKrD,YAAL,CAAkBiB,CAHc,EAIhC,KAAKjB,YAAL,CAAkBkB,CAJc,EAKhC,KAAKjB,cAAL,CAAoBgB,CALY,EAMhC,KAAKhB,cAAL,CAAoBiB,CANY,EAOhCgC,QAPgC,CAAlC;AASD,OAVD,MAUO;AACLE,QAAAA,SAAS,GAAG;AACVnC,UAAAA,CAAC,EAAE,KAAKjB,YAAL,CAAkBiB,CAAlB,GAAsBiC,QADf;AAEVhC,UAAAA,CAAC,EAAE,KAAKlB,YAAL,CAAkBkB,CAAlB,GAAsBgC;AAFf,SAAZ;AAID;;AAED,YAAMP,KAAK,GAAG;AAAE1B,QAAAA,CAAC,EAAEmC,SAAS,CAACnC,CAAV,GAAc,KAAKf,aAAL,CAAmBe,CAAtC;AAAyCC,QAAAA,CAAC,EAAEkC,SAAS,CAAClC,CAAV,GAAc,KAAKhB,aAAL,CAAmBgB;AAA7E,OAAd;AAEA,WAAKhB,aAAL,CAAmBe,CAAnB,IAAwB0B,KAAK,CAAC1B,CAA9B;AACA,WAAKf,aAAL,CAAmBgB,CAAnB,IAAwByB,KAAK,CAACzB,CAA9B;AAEAZ,MAAAA,WAAW,CAAC6B,QAAZ,CAAqBQ,KAArB;AACArC,MAAAA,WAAW,CAACgD,IAAZ;AAEA,WAAKV,WAAL,CAAiB,MAAM,KAAKC,WAAL,EAAvB;AACD,KA9BD,MA8BO;AACLvC,MAAAA,WAAW,CAAC6B,QAAZ,CAAqB;AACnBlB,QAAAA,CAAC,EAAE,KAAKhB,cAAL,CAAoBgB,CAApB,GAAwB,KAAKf,aAAL,CAAmBe,CAD3B;AAEnBC,QAAAA,CAAC,EAAE,KAAKjB,cAAL,CAAoBiB,CAApB,GAAwB,KAAKhB,aAAL,CAAmBgB;AAF3B,OAArB;AAKA,WAAKqC,GAAL;AACD;AACF;;AAEDT,EAAAA,aAAa,GAAI;AACf,UAAM;AAAExC,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAM2C,CAAC,GAAG3C,WAAW,CAACc,IAAZ,KAAqB,KAAKvB,EAApC;AACA,UAAM;AAAET,MAAAA,iBAAiB,EAAEoE;AAArB,QAAkC7C,UAAU,CAACL,WAAD,CAAlD;;AAEA,QAAI2C,CAAC,GAAGO,QAAR,EAAkB;AAChB,YAAMJ,SAAS,GAAG;AAChBnC,QAAAA,CAAC,EAAEwC,WAAW,CAACR,CAAD,EAAI,CAAJ,EAAO,KAAKjD,YAAL,CAAkBiB,CAAzB,EAA4BuC,QAA5B,CADE;AAEhBtC,QAAAA,CAAC,EAAEuC,WAAW,CAACR,CAAD,EAAI,CAAJ,EAAO,KAAKjD,YAAL,CAAkBkB,CAAzB,EAA4BsC,QAA5B;AAFE,OAAlB;AAIA,YAAMb,KAAK,GAAG;AACZ1B,QAAAA,CAAC,EAAEmC,SAAS,CAACnC,CAAV,GAAc,KAAKf,aAAL,CAAmBe,CADxB;AAEZC,QAAAA,CAAC,EAAEkC,SAAS,CAAClC,CAAV,GAAc,KAAKhB,aAAL,CAAmBgB;AAFxB,OAAd;AAKA,WAAKhB,aAAL,CAAmBe,CAAnB,IAAwB0B,KAAK,CAAC1B,CAA9B;AACA,WAAKf,aAAL,CAAmBgB,CAAnB,IAAwByB,KAAK,CAACzB,CAA9B;AAEAZ,MAAAA,WAAW,CAAC6B,QAAZ,CAAqBQ,KAArB;AACArC,MAAAA,WAAW,CAACgD,IAAZ,CAAiB;AAAEI,QAAAA,aAAa,EAAE,KAAKhE;AAAtB,OAAjB;AAEA,WAAKkD,WAAL,CAAiB,MAAM,KAAKE,aAAL,EAAvB;AACD,KAjBD,MAiBO;AACLxC,MAAAA,WAAW,CAAC6B,QAAZ,CAAqB;AACnBlB,QAAAA,CAAC,EAAE,KAAKjB,YAAL,CAAkBiB,CAAlB,GAAsB,KAAKf,aAAL,CAAmBe,CADzB;AAEnBC,QAAAA,CAAC,EAAE,KAAKlB,YAAL,CAAkBkB,CAAlB,GAAsB,KAAKhB,aAAL,CAAmBgB;AAFzB,OAArB;AAKA,WAAKqC,GAAL;AACD;AACF;;AAED3E,EAAAA,MAAM,CAAE;AAAE+E,IAAAA,OAAF;AAAWlD,IAAAA,KAAX;AAAkBmD,IAAAA;AAAlB,GAAF,EAAoE;AACxE,UAAM;AAAEtD,MAAAA;AAAF,QAAkB,IAAxB,CADwE,CAGxE;;AACAA,IAAAA,WAAW,CAAC6B,QAAZ,CAAqB;AACnBlB,MAAAA,CAAC,EAAE,CAAC,KAAKf,aAAL,CAAmBe,CADJ;AAEnBC,MAAAA,CAAC,EAAE,CAAC,KAAKhB,aAAL,CAAmBgB;AAFJ,KAArB,EAJwE,CASxE;;AACAZ,IAAAA,WAAW,CAACuD,aAAZ,CAA0BF,OAA1B,EAAmClD,KAAnC,EAA0CmD,WAA1C,EAAuD,IAAvD,EAVwE,CAYxE;;AACAtD,IAAAA,WAAW,CAAC8B,QAAZ,CAAqB;AACnB9B,MAAAA,WADmB;AAEnBG,MAAAA,KAFmB;AAGnBiB,MAAAA,KAAK,EAAE;AAHY,KAArB;;AAKAxD,IAAAA,UAAU,CAACoC,WAAW,CAACQ,MAAZ,CAAmBgD,IAApB,EAA0BxD,WAAW,CAACQ,MAAZ,CAAmBO,GAA7C,CAAV;AAEA,SAAK0C,IAAL;AACD;;AAEDR,EAAAA,GAAG,GAAI;AACL,SAAKjD,WAAL,CAAiBgD,IAAjB;AACA,SAAKhD,WAAL,CAAiBiD,GAAjB;AACA,SAAKQ,IAAL;AACD;;AAEDA,EAAAA,IAAI,GAAI;AACN,SAAKzE,MAAL,GAAc,KAAKE,SAAL,GAAiB,KAA/B;AACA,SAAKc,WAAL,CAAiB+B,UAAjB,GAA8B,IAA9B;AACAlE,IAAAA,GAAG,CAAC6F,MAAJ,CAAW,KAAK3D,OAAhB;AACD;;AAhQuB;;AAmQ1B,SAASG,KAAT,CAAgB;AAAEF,EAAAA,WAAF;AAAeG,EAAAA;AAAf,CAAhB,EAAuE;AACrE,MAAI,CAACH,WAAW,CAAC2D,YAAb,IAA6B3D,WAAW,CAAC+B,UAA7C,EAAyD;AACvD,WAAO,IAAP;AACD;;AAED,QAAM6B,OAAO,GAAG5D,WAAW,CAACxB,OAAZ,CAAoB0B,KAApB,CAA0BC,KAA1B,CAAhB,CALqE,CAOrE;;AACA,SAAOyD,OAAO,GAAG,KAAH,GAAW,IAAzB;AACD,C,CAED;AACA;;;AACA,SAAStF,MAAT,CAAiBuF,GAAjB,EAAuD;AACrD,QAAM;AAAE7D,IAAAA,WAAF;AAAesD,IAAAA;AAAf,MAA+BO,GAArC;AACA,QAAMC,KAAK,GAAG9D,WAAW,CAACxB,OAA1B;AAEA,MAAI,CAACsF,KAAK,CAAC9E,MAAX,EAAmB;AAEnB,MAAI+E,OAAO,GAAGT,WAAd,CANqD,CAQrD;;AACA,SAAO3F,EAAE,CAACoG,OAAH,CAAWA,OAAX,CAAP,EAA4B;AAC1B;AACA,QAAIA,OAAO,KAAK/D,WAAW,CAAC+D,OAA5B,EAAqC;AACnCD,MAAAA,KAAK,CAACxF,MAAN,CAAauF,GAAb;AACA;AACD;;AAEDE,IAAAA,OAAO,GAAGtG,GAAG,CAACuG,UAAJ,CAAeD,OAAf,CAAV;AACD;AACF;;AAED,SAASN,IAAT,CAAe;AAAEzD,EAAAA;AAAF,CAAf,EAA8D;AAC5D,QAAM8D,KAAK,GAAG9D,WAAW,CAACxB,OAA1B;;AAEA,MAAIsF,KAAK,CAAC9E,MAAV,EAAkB;AAChB8E,IAAAA,KAAK,CAACL,IAAN;AACD;AACF;;AAED,SAASpD,UAAT,CAAqB;AAAE4D,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAArB,EAA8D;AAC5D,SAAOD,YAAY,IAAIA,YAAY,CAAC7D,OAA7B,IAAwC8D,QAAQ,CAACC,IAAjD,IAAyDF,YAAY,CAAC7D,OAAb,CAAqB8D,QAAQ,CAACC,IAA9B,EAAoC3F,OAApG;AACD;;AAED,MAAMA,OAAe,GAAG;AACtB4F,EAAAA,EAAE,EAAE,SADkB;AAEtBC,EAAAA,MAAM,EAAE,CAAC,WAAD,EAAc,SAAd,CAFc;AAGtBvG,EAAAA,OAHsB;AAItBwG,EAAAA,SAAS,EAAE;AACT,wBAAoB,CAAC;AAAEtE,MAAAA;AAAF,KAAD,KAAqB;AACvCA,MAAAA,WAAW,CAACxB,OAAZ,GAAsB,IAAIO,YAAJ,CAAiBiB,WAAjB,CAAtB;AACD,KAHQ;AAKT,sCAAkCE,KALzB;AAMT,yBAAqB5B,MANZ;AAOT,yBAAqBmF,IAPZ;AAST,yCAAsCI,GAAD,IAAS;AAC5C,YAAM;AAAE1E,QAAAA;AAAF,UAAmB0E,GAAG,CAAC7D,WAA7B;AAEAb,MAAAA,YAAY,CAACsE,IAAb,CAAkBI,GAAlB;AACA1E,MAAAA,YAAY,CAACe,KAAb,CAAmB2D,GAAnB,EAAwBA,GAAG,CAAC7D,WAAJ,CAAgBQ,MAAhB,CAAuBO,GAAvB,CAA2BC,IAAnD;AACA7B,MAAAA,YAAY,CAACoF,kBAAb,CAAgCV,GAAhC;AACD,KAfQ;AAiBT,+CAA4CA,GAAD,IAASA,GAAG,CAAC7D,WAAJ,CAAgBb,YAAhB,CAA6BqF,WAA7B,CAAyCX,GAAzC,CAjB3C;AAkBT,kCAA8BtG,SAAS,CAACkH,iBAlB/B;AAmBT,wCAAoClH,SAAS,CAACkH,iBAnBrC;AAoBT,8CAA2CZ,GAAD,IACxCA,GAAG,CAAC7D,WAAJ,CAAgBb,YAAhB,CAA6BuF,wBAA7B,CAAsDb,GAAtD,CArBO;AAsBT,wCAAqCA,GAAD,IAASA,GAAG,CAAC7D,WAAJ,CAAgBb,YAAhB,CAA6BuF,wBAA7B,CAAsDb,GAAtD;AAtBpC;AAJW,CAAxB,C,CA8BA;;AACA,SAASc,gBAAT,CAA2BhC,CAA3B,EAAsCiC,EAAtC,EAAkDC,EAAlD,EAA8DC,EAA9D,EAA0E;AACxE,QAAMC,EAAE,GAAG,IAAIpC,CAAf;AACA,SAAOoC,EAAE,GAAGA,EAAL,GAAUH,EAAV,GAAe,IAAIG,EAAJ,GAASpC,CAAT,GAAakC,EAA5B,GAAiClC,CAAC,GAAGA,CAAJ,GAAQmC,EAAhD;AACD;;AAED,SAAS/B,sBAAT,CACEiC,MADF,EAEEC,MAFF,EAGEC,GAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,QAPF,EAQE;AACA,SAAO;AACL3E,IAAAA,CAAC,EAAEgE,gBAAgB,CAACW,QAAD,EAAWN,MAAX,EAAmBE,GAAnB,EAAwBE,IAAxB,CADd;AAELxE,IAAAA,CAAC,EAAE+D,gBAAgB,CAACW,QAAD,EAAWL,MAAX,EAAmBE,GAAnB,EAAwBE,IAAxB;AAFd,GAAP;AAID,C,CAED;;;AACA,SAASlC,WAAT,CAAsBR,CAAtB,EAAiC4C,CAAjC,EAA4CC,CAA5C,EAAuDC,CAAvD,EAAkE;AAChE9C,EAAAA,CAAC,IAAI8C,CAAL;AACA,SAAO,CAACD,CAAD,GAAK7C,CAAL,IAAUA,CAAC,GAAG,CAAd,IAAmB4C,CAA1B;AACD;;AAED,eAAe/G,OAAf",
	"sourcesContent": [
		"import type { Interaction, DoPhaseArg } from '@interactjs/core/Interaction'\nimport type { ActionName, Scope, SignalArgs, Plugin } from '@interactjs/core/scope'\nimport Modification from '@interactjs/modifiers/Modification'\nimport * as modifiers from '@interactjs/modifiers/base'\nimport offset from '@interactjs/offset/plugin'\nimport type { Point, PointerEventType } from '@interactjs/types/index'\nimport * as dom from '@interactjs/utils/domUtils'\nimport hypot from '@interactjs/utils/hypot'\nimport is from '@interactjs/utils/is'\nimport { copyCoords } from '@interactjs/utils/pointerUtils'\nimport raf from '@interactjs/utils/raf'\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface PhaseMap {\n    resume?: true\n    inertiastart?: true\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    inertia?: InertiaState\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface PerActionDefaults {\n    inertia?: {\n      enabled?: boolean\n      resistance?: number // the lambda in exponential decay\n      minSpeed?: number // target speed must be above this for inertia to start\n      endSpeed?: number // the speed at which inertia is slow enough to stop\n      allowResume?: true // allow resuming an action in inertia phase\n      smoothEndDuration?: number // animate to snap/restrict endOnly if there's no inertia\n    }\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-inertiastart': Omit<DoPhaseArg<ActionName, 'inertiastart'>, 'iEvent'>\n    'interactions:action-inertiastart': DoPhaseArg<ActionName, 'inertiastart'>\n    'interactions:after-action-inertiastart': DoPhaseArg<ActionName, 'inertiastart'>\n    'interactions:before-action-resume': Omit<DoPhaseArg<ActionName, 'resume'>, 'iEvent'>\n    'interactions:action-resume': DoPhaseArg<ActionName, 'resume'>\n    'interactions:after-action-resume': DoPhaseArg<ActionName, 'resume'>\n  }\n}\n\nfunction install (scope: Scope) {\n  const { defaults } = scope\n\n  scope.usePlugin(offset)\n  scope.usePlugin(modifiers.default)\n  scope.actions.phases.inertiastart = true\n  scope.actions.phases.resume = true\n\n  defaults.perAction.inertia = {\n    enabled: false,\n    resistance: 10, // the lambda in exponential decay\n    minSpeed: 100, // target speed must be above this for inertia to start\n    endSpeed: 10, // the speed at which inertia is slow enough to stop\n    allowResume: true, // allow resuming an action in inertia phase\n    smoothEndDuration: 300, // animate to snap/restrict endOnly if there's no inertia\n  }\n}\n\nexport class InertiaState {\n  active = false\n  isModified = false\n  smoothEnd = false\n  allowResume = false\n\n  modification!: Modification\n  modifierCount = 0\n  modifierArg!: modifiers.ModifierArg\n\n  startCoords!: Point\n  t0 = 0\n  v0 = 0\n\n  te = 0\n  targetOffset!: Point\n  modifiedOffset!: Point\n  currentOffset!: Point\n\n  lambda_v0? = 0 // eslint-disable-line camelcase\n  one_ve_v0? = 0 // eslint-disable-line camelcase\n  timeout!: number\n  readonly interaction: Interaction\n\n  constructor (interaction: Interaction) {\n    this.interaction = interaction\n  }\n\n  start (event: PointerEventType) {\n    const { interaction } = this\n    const options = getOptions(interaction)\n\n    if (!options || !options.enabled) {\n      return false\n    }\n\n    const { client: velocityClient } = interaction.coords.velocity\n    const pointerSpeed = hypot(velocityClient.x, velocityClient.y)\n    const modification = this.modification || (this.modification = new Modification(interaction))\n\n    modification.copyFrom(interaction.modification)\n\n    this.t0 = interaction._now()\n    this.allowResume = options.allowResume\n    this.v0 = pointerSpeed\n    this.currentOffset = { x: 0, y: 0 }\n    this.startCoords = interaction.coords.cur.page\n\n    this.modifierArg = modification.fillArg({\n      pageCoords: this.startCoords,\n      preEnd: true,\n      phase: 'inertiastart',\n    })\n\n    const thrown =\n      this.t0 - interaction.coords.cur.timeStamp < 50 &&\n      pointerSpeed > options.minSpeed &&\n      pointerSpeed > options.endSpeed\n\n    if (thrown) {\n      this.startInertia()\n    } else {\n      modification.result = modification.setAll(this.modifierArg)\n\n      if (!modification.result.changed) {\n        return false\n      }\n\n      this.startSmoothEnd()\n    }\n\n    // force modification change\n    interaction.modification.result.rect = null\n\n    // bring inertiastart event to the target coords\n    interaction.offsetBy(this.targetOffset)\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'inertiastart',\n    })\n    interaction.offsetBy({ x: -this.targetOffset.x, y: -this.targetOffset.y })\n    // force modification change\n    interaction.modification.result.rect = null\n\n    this.active = true\n    interaction.simulation = this\n\n    return true\n  }\n\n  startInertia () {\n    const startVelocity = this.interaction.coords.velocity.client\n    const options = getOptions(this.interaction)\n    const lambda = options.resistance\n    const inertiaDur = -Math.log(options.endSpeed / this.v0) / lambda\n\n    this.targetOffset = {\n      x: (startVelocity.x - inertiaDur) / lambda,\n      y: (startVelocity.y - inertiaDur) / lambda,\n    }\n\n    this.te = inertiaDur\n    this.lambda_v0 = lambda / this.v0\n    this.one_ve_v0 = 1 - options.endSpeed / this.v0\n\n    const { modification, modifierArg } = this\n\n    modifierArg.pageCoords = {\n      x: this.startCoords.x + this.targetOffset.x,\n      y: this.startCoords.y + this.targetOffset.y,\n    }\n\n    modification.result = modification.setAll(modifierArg)\n\n    if (modification.result.changed) {\n      this.isModified = true\n      this.modifiedOffset = {\n        x: this.targetOffset.x + modification.result.delta.x,\n        y: this.targetOffset.y + modification.result.delta.y,\n      }\n    }\n\n    this.onNextFrame(() => this.inertiaTick())\n  }\n\n  startSmoothEnd () {\n    this.smoothEnd = true\n    this.isModified = true\n    this.targetOffset = {\n      x: this.modification.result.delta.x,\n      y: this.modification.result.delta.y,\n    }\n\n    this.onNextFrame(() => this.smoothEndTick())\n  }\n\n  onNextFrame (tickFn: () => void) {\n    this.timeout = raf.request(() => {\n      if (this.active) {\n        tickFn()\n      }\n    })\n  }\n\n  inertiaTick () {\n    const { interaction } = this\n    const options = getOptions(interaction)\n    const lambda = options.resistance\n    const t = (interaction._now() - this.t0) / 1000\n\n    if (t < this.te) {\n      const progress = 1 - (Math.exp(-lambda * t) - this.lambda_v0) / this.one_ve_v0\n      let newOffset: Point\n\n      if (this.isModified) {\n        newOffset = getQuadraticCurvePoint(\n          0,\n          0,\n          this.targetOffset.x,\n          this.targetOffset.y,\n          this.modifiedOffset.x,\n          this.modifiedOffset.y,\n          progress,\n        )\n      } else {\n        newOffset = {\n          x: this.targetOffset.x * progress,\n          y: this.targetOffset.y * progress,\n        }\n      }\n\n      const delta = { x: newOffset.x - this.currentOffset.x, y: newOffset.y - this.currentOffset.y }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move()\n\n      this.onNextFrame(() => this.inertiaTick())\n    } else {\n      interaction.offsetBy({\n        x: this.modifiedOffset.x - this.currentOffset.x,\n        y: this.modifiedOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  smoothEndTick () {\n    const { interaction } = this\n    const t = interaction._now() - this.t0\n    const { smoothEndDuration: duration } = getOptions(interaction)\n\n    if (t < duration) {\n      const newOffset = {\n        x: easeOutQuad(t, 0, this.targetOffset.x, duration),\n        y: easeOutQuad(t, 0, this.targetOffset.y, duration),\n      }\n      const delta = {\n        x: newOffset.x - this.currentOffset.x,\n        y: newOffset.y - this.currentOffset.y,\n      }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move({ skipModifiers: this.modifierCount })\n\n      this.onNextFrame(() => this.smoothEndTick())\n    } else {\n      interaction.offsetBy({\n        x: this.targetOffset.x - this.currentOffset.x,\n        y: this.targetOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  resume ({ pointer, event, eventTarget }: SignalArgs['interactions:down']) {\n    const { interaction } = this\n\n    // undo inertia changes to interaction coords\n    interaction.offsetBy({\n      x: -this.currentOffset.x,\n      y: -this.currentOffset.y,\n    })\n\n    // update pointer at pointer down position\n    interaction.updatePointer(pointer, event, eventTarget, true)\n\n    // fire resume signals and event\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'resume',\n    })\n    copyCoords(interaction.coords.prev, interaction.coords.cur)\n\n    this.stop()\n  }\n\n  end () {\n    this.interaction.move()\n    this.interaction.end()\n    this.stop()\n  }\n\n  stop () {\n    this.active = this.smoothEnd = false\n    this.interaction.simulation = null\n    raf.cancel(this.timeout)\n  }\n}\n\nfunction start ({ interaction, event }: DoPhaseArg<ActionName, 'end'>) {\n  if (!interaction._interacting || interaction.simulation) {\n    return null\n  }\n\n  const started = interaction.inertia.start(event)\n\n  // prevent action end if inertia or smoothEnd\n  return started ? false : null\n}\n\n// Check if the down event hits the current inertia target\n// control should be return to the user\nfunction resume (arg: SignalArgs['interactions:down']) {\n  const { interaction, eventTarget } = arg\n  const state = interaction.inertia\n\n  if (!state.active) return\n\n  let element = eventTarget as Node\n\n  // climb up the DOM tree from the event target\n  while (is.element(element)) {\n    // if interaction element is the current inertia target element\n    if (element === interaction.element) {\n      state.resume(arg)\n      break\n    }\n\n    element = dom.parentNode(element)\n  }\n}\n\nfunction stop ({ interaction }: { interaction: Interaction }) {\n  const state = interaction.inertia\n\n  if (state.active) {\n    state.stop()\n  }\n}\n\nfunction getOptions ({ interactable, prepared }: Interaction) {\n  return interactable && interactable.options && prepared.name && interactable.options[prepared.name].inertia\n}\n\nconst inertia: Plugin = {\n  id: 'inertia',\n  before: ['modifiers', 'actions'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.inertia = new InertiaState(interaction)\n    },\n\n    'interactions:before-action-end': start,\n    'interactions:down': resume,\n    'interactions:stop': stop,\n\n    'interactions:before-action-resume': (arg) => {\n      const { modification } = arg.interaction\n\n      modification.stop(arg)\n      modification.start(arg, arg.interaction.coords.cur.page)\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-inertiastart': (arg) => arg.interaction.modification.setAndApply(arg),\n    'interactions:action-resume': modifiers.addEventModifiers,\n    'interactions:action-inertiastart': modifiers.addEventModifiers,\n    'interactions:after-action-inertiastart': (arg) =>\n      arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-resume': (arg) => arg.interaction.modification.restoreInteractionCoords(arg),\n  },\n}\n\n// http://stackoverflow.com/a/5634528/2280888\nfunction _getQBezierValue (t: number, p1: number, p2: number, p3: number) {\n  const iT = 1 - t\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3\n}\n\nfunction getQuadraticCurvePoint (\n  startX: number,\n  startY: number,\n  cpX: number,\n  cpY: number,\n  endX: number,\n  endY: number,\n  position: number,\n) {\n  return {\n    x: _getQBezierValue(position, startX, cpX, endX),\n    y: _getQBezierValue(position, startY, cpY, endY),\n  }\n}\n\n// http://gizma.com/easing/\nfunction easeOutQuad (t: number, b: number, c: number, d: number) {\n  t /= d\n  return -c * t * (t - 2) + b\n}\n\nexport default inertia\n"
	]
}